import {
  ClerkProvider,
  SignedIn,
  SignedOut,
  SignInButton,
  SignUpButton,
  UserButton,
} from "@clerk/nextjs";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { QueryProvider } from "@/providers/query-provider";
import { RefineProvider } from "@/providers/refine-provider";
import { Button } from "@/components/ui/button";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export const dynamic = "force-dynamic";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <header className="flex justify-end items-center p-4 gap-2 sm:gap-4 h-16 border-b">
            <SignedOut>
              <SignInButton>
                <Button variant="outline" size="default" className="rounded-full sm:h-10 sm:px-5">
                  Sign In
                </Button>
              </SignInButton>
              <SignUpButton>
                <Button size="default" className="rounded-full sm:h-10 sm:px-5 bg-[#6c47ff] hover:bg-[#5a3ad1]">
                  Sign Up
                </Button>
              </SignUpButton>
            </SignedOut>
            <SignedIn>
              <UserButton
                appearance={{
                  elements: {
                    avatarBox: "h-9 w-9 sm:h-10 sm:w-10 cursor-pointer hover:opacity-90 transition-opacity"
                  }
                }}
              />
            </SignedIn>
          </header>
          <QueryProvider>
            <RefineProvider>{children}</RefineProvider>
          </QueryProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}
